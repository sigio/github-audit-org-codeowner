#!/bin/env python3

import re
import os
from github import Github
import requests

# === Configuration ===
GITHUB_TOKEN = os.getenv("GH_TOKEN")  # Set this in your environment
ORG_NAME = "minvws"

# === Initialization ===
g = Github(GITHUB_TOKEN)
org = g.get_organization(ORG_NAME)

# CODEOWNERS possible paths
CODEOWNERS_PATHS = [
    ".github/CODEOWNERS",
    "CODEOWNERS",
    "docs/CODEOWNERS"
]

# Regex to parse CODEOWNERS lines
CODEOWNERS_LINE_REGEX = re.compile(r"^(\S+)\s+(.+)$")

# === Helper Functions ===

def get_codeowners_file(repo):
    """Find and return the CODEOWNERS file content from a repo."""
    for path in CODEOWNERS_PATHS:
        try:
            contents = repo.get_contents(path)
            return contents.decoded_content.decode("utf-8")
        except:
            continue
    return None

def parse_codeowners(content):
    """Parse CODEOWNERS content into a list of (path, owners)."""
    rules = []
    for line in content.splitlines():
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        match = CODEOWNERS_LINE_REGEX.match(line)
        if match:
            path, owners = match.groups()
            owners = owners.split()
            rules.append((path, owners))
    return rules

def has_write_access(repo, owner):
    """Check if a user/team has write access."""
    if owner.startswith("@"):
        owner = owner[1:]

    if "/" in owner:  # team
        team_name = owner.split("/")[-1]
        try:
            team = org.get_team_by_slug(team_name)
            return team.get_repo(repo).permissions.push
        except:
            return False
    else:  # user
        try:
            collaborator = repo.get_collaborator_permission(owner)
            return collaborator in ['write', 'admin']
        except:
            return False

def check_repo_codeowners(repo):
    """Check CODEOWNERS validity for a repo."""
    print(f"Checking repository: {repo.full_name}")
    content = get_codeowners_file(repo)
    if not content:
        print("  ❌ CODEOWNERS file not found.")
        return

    rules = parse_codeowners(content)
    for path, owners in rules:
        for owner in owners:
            if not has_write_access(repo, owner):
                print(f"  ⚠️  {owner} does NOT have write access for {path}")

# === Main Execution ===

def main():
    print(f"Checking all repositories in organization '{ORG_NAME}'...")
    for repo in org.get_repos():
        check_repo_codeowners(repo)

if __name__ == "__main__":
    main()

